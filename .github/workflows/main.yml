name: Main.js CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted
    
    strategy:
      matrix:
        node-version: ['18.x']
   
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          cd earnarsbackend
          
          # Remove node_modules directory if it exists
          rm -rf node_modules/
          
          # Install dependencies using npm ci
          npm ci

      - name: Clean up and deploy new backend files
        run: |
          BACKEND_DIR="earnarsbackend"
          
          # Debug the current directory and list files
          echo "Current directory: $(pwd)"
          ls -la

          # Ensure backend directory exists
          if [ ! -d "$BACKEND_DIR" ]; then
            echo "Error: Backend directory '$BACKEND_DIR' does not exist."
            exit 1
          fi

          # Preserve the .env and package.json files
          if [ -f "$BACKEND_DIR/.env" ]; then
            echo "Backing up .env file..."
            mv "$BACKEND_DIR/.env" /tmp/.env_backup
          fi

          if [ -f "$BACKEND_DIR/package.json" ]; then
            echo "Preserving package.json file..."
            mv "$BACKEND_DIR/package.json" /tmp/package.json_backup
          fi

          # Remove all files in the backend directory except .env and package.json
          echo "Removing all files except .env and package.json..."
          find "$BACKEND_DIR" -type f ! -name ".env" ! -name "package.json" -exec rm -f {} +

          # Restore the .env and package.json files
          if [ -f /tmp/.env_backup ]; then
            echo "Restoring .env file..."
            mv /tmp/.env_backup "$BACKEND_DIR/.env"
          fi

          if [ -f /tmp/package.json_backup ]; then
            echo "Restoring package.json file..."
            mv /tmp/package.json_backup "$BACKEND_DIR/package.json"
          fi

          # Copy new backend files from the source directory to the actual backend folder
          echo "Deploying new backend files..."
          cp -r ./backend/* "$BACKEND_DIR/"

          # Install dependencies for the backend
          echo "Installing backend dependencies..."
          cd "$BACKEND_DIR"
          rm -rf node_modules/
          npm ci  # This installs dependencies as defined in package-lock.json

          echo "Backend files updated and dependencies installed successfully."

      - name: Export environment variables
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: echo "Environment variables set."

      - name: Restart services
        run: |
          npm update
          pm2 stop 0
          pm2 start 0
          pm2 save
          sudo service nginx restart
